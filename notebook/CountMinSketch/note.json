{"paragraphs":[{"text":"%md\n\n# Count Min Sketch\n\nHelpful in finding the frequency of items in a stream of data.  In the following example we will take a look at estimating the frequency of the top 10 tweeters in streaming application. \n\nPushing the distribution calculation of a single window to a timeseries data structure in DSE we can discover frequency across any time range. \n\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Count Min Sketch</h1>\n<p>Helpful in finding the frequency of items in a stream of data. In the following example we will take a look at estimating the frequency of the top 10 tweeters in streaming application. </p>\n<p>Pushing the distribution calculation of a single window to a timeseries data structure in DSE we can discover frequency across any time range.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1522723061232_1762791411","id":"20171029-195452_1404958465","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:204"},{"title":"Add Spark Dependencies","text":"%dep\n\n//Run before other paragraphs\n//Add these dependencies to the interpreter to make your life easier...\n\nz.reset()\nz.load(\"com.twitter:algebird-core_2.11:0.13.3\")\nz.load(\"org.apache.bahir:spark-streaming-twitter_2.10:2.1.0\")\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061238_1762021914","id":"20171029-225200_1695000914","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:205"},{"title":"Create Keyspace","text":"%cassandra\n\nCREATE KEYSPACE IF NOT EXISTS approximations WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061239_1761637165","id":"20171029-172007_472160345","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"title":"Create Table For Timeseries","text":"%cassandra\n\nCREATE TABLE  IF NOT EXISTS approximations.cmsdata ( id text, date text, batchtime timestamp, cmsstore blob, PRIMARY KEY ((id, date), batchtime));\n\n\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"text","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061240_1759713420","id":"20171027-145829_385231240","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"title":"Create Search Index on Timeseries","text":"%cassandra\n\nCREATE SEARCH INDEX IF NOT EXISTS ON approximations.cmsdata WITH COLUMNS batchtime;\n\n\n\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061241_1759328671","id":"20171102-101223_59689468","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"title":"Process Stream and Perform CMS on each Window","text":"%spark\n\n//Listen to a stream of tweets and perform CMS sketch on data within window and persist to \n//DataStax Multimodel Store in timeseries\n\nimport com.twitter.algebird._\nimport com.twitter.algebird.CMSHasherImplicits._\nimport org.apache.log4j.{Level, Logger}\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.twitter._\nimport twitter4j.conf.ConfigurationBuilder\nimport twitter4j.auth.OAuthAuthorization\nimport java.util.Date\nimport com.datastax.spark.connector.streaming._\nimport com.datastax.spark.connector._\nimport com.datastax.spark.connector.SomeColumns\nimport com.twitter.chill.ScalaKryoInstantiator\nimport java.text.SimpleDateFormat\n\n    //Spark Streaming\n    val batchIntervalSeconds = 10\n    val minutesToStream = 5\n    \n    @transient  val ssc = new StreamingContext(sc, Seconds(batchIntervalSeconds))\n    \n    //https://github.com/twitter/algebird/blob/develop/algebird-core/src/main/scala/com/twitter/algebird/CountMinSketch.scala \n    // CMS parameters\n    \n    //A bound on the probability that a query estimate does not lie within \n    //some small interval (an interval that depends on `eps`) around the truth.\n    val DELTA = 1E-3 \n    \n    //One-sided error bound on the error of each point query, i.e. frequency estimate.\n    val EPS = 0.01 \n    \n    //A seed to initialize the random number generator used to create the pairwise independent hash functions.\n    val SEED = 1 \n    \n    // heavyHittersPct: A threshold for finding heavy hitters, i.e., elements that appear\n    //at least (heavyHittersPct * totalCount) times in the stream.\n    val PERC = 0.001 \n    \n    // val cms = new CountMinSketchMonoid(EPS, DELTA, SEED, PERC)\n    // val cms = NEW TopNCMS.monoid[Long](EPS, DELTA, SEED, N)\n    val cms = TopPctCMS.monoid[String](EPS, DELTA, SEED, PERC)\n   \n    //Twitter Authentication\n    @transient val cb = new ConfigurationBuilder();\n   \n    //BYO Credentials \n    cb.setDebugEnabled(true)\n      .setOAuthConsumerKey(\"****\")\n      .setOAuthConsumerSecret(\"****\")\n      .setOAuthAccessToken(\"****\")\n      .setOAuthAccessTokenSecret(\"***\")\n  \n    @transient val auth = new OAuthAuthorization(cb.build)\n    \n    val filters = new Array[String](0)\n    \n    //Twitter Stream\n    @transient val stream = TwitterUtils.createStream(ssc, Some(auth), filters, StorageLevel.MEMORY_ONLY_SER_2)\n    \n    //Twitter UserIds in Batch of Tweets\n    @transient val users = stream.map(status => status.getUser.getName())\n\n    @transient  val approxTopUsers = users.mapPartitions(ids => {\n      ids.map(id => cms.create(id))\n    }).reduce(_ ++ _)\n\n    //Used to create bucketing for timeseries.\n    val todayAsString = new SimpleDateFormat(\"MM-dd-yyyy\").format(new Date())\n        \n    approxTopUsers.foreachRDD(rdd => {\n      if (rdd.count() != 0) {\n        val now = new Date()\n        \n        val partial = rdd.first()\n        \n        val store = ScalaKryoInstantiator.defaultPool.toBytesWithClass(partial)\n\n        val oneWindowValue = sc.parallelize(Seq((\"tophashtags\", todayAsString, now, store)))\n        \n        oneWindowValue.saveToCassandra(\"approximations\", \"cmsdata\", SomeColumns(\"id\", \"date\", \"batchtime\", \"cmsstore\"))\n\n        \n      }\n    })\n\n\n    ssc.start()\n    ssc.awaitTerminationOrTimeout(minutesToStream * 60  * 1000)//5 minutes...\n    ssc.stop(stopSparkContext = false, stopGracefully=true)\n    \n    ","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{"0":{"graph":{"mode":"table","height":344,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061242_1760482918","id":"20171027-155950_98980029","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:209"},{"title":"Perform CMS on Larger Time Window","text":"%spark\n\n//Aggregate CMS Sketches performed today into a single CMS data structure\n\nimport com.twitter.algebird._\nimport com.twitter.algebird.CMSHasherImplicits._\nimport com.twitter.chill.ScalaKryoInstantiator\n\nimport com.datastax.spark.connector.streaming._\nimport com.datastax.spark.connector._\nimport com.datastax.spark.connector.SomeColumns\nimport java.text.SimpleDateFormat\nimport java.util.Date\n\n\n// K highest frequency elements to take\nval TOPK = 10\n\nval todayAsString = new SimpleDateFormat(\"MM-dd-yyyy\").format(new Date())\n    \nval rdd  = sc.cassandraTable[Array[Byte]](\"approximations\", \"cmsdata\").select(\"cmsstore\").where(\"id = ?\", \"tophashtags\").where(\"date = ?\", todayAsString)\n\nval approxUsers = rdd.mapPartitions(ids => {\n  ids.map(id => ScalaKryoInstantiator.defaultPool.fromBytes(id).asInstanceOf[TopCMS[String]])\n}).reduce(_ ++ _)\n\n  \nval globalTopK = approxUsers.heavyHitters.map(id =>\n          (id, approxUsers.frequency(id).estimate)).toSeq.sortBy(_._2).reverse.slice(0, TOPK)\n\nz.show(globalTopK.toDF(\"User Name\", \"Number of Tweets\"))\n\n","dateUpdated":"2018-04-03T02:37:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{"1":{"graph":{"mode":"table","height":300,"optionOpen":true,"setting":{"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"User Name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"Number of Tweets","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061243_1760098169","id":"20171029-184708_658789968","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:210"},{"dateUpdated":"2018-04-03T02:37:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1522723061244_1758174425","id":"20171024-221710_1027774543","dateCreated":"2018-04-03T02:37:41+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:211"}],"name":"DataStax Sketches/CountMinSketch","id":"2D9FWB5WC","angularObjects":{"2DB65Y49W:shared_process":[],"2D9SZQ2Q3:shared_process":[],"2DA3P6XY2:shared_process":[],"2DCN64GS2:shared_process":[],"2DA2526KY:shared_process":[],"2DBTYKG7X:shared_process":[],"2D9WM939D:shared_process":[],"2DBAVC4NY:shared_process":[],"2D9N2JJAW:shared_process":[],"2DCAQXCTE:shared_process":[],"2DARD18E3:shared_process":[],"2DCA515RH:shared_process":[],"2DAYWWA24:shared_process":[],"2D9ARXMWB:shared_process":[],"2DC8SJRAD:shared_process":[],"2DBNPAWM8:shared_process":[],"2D9R7YWJB:shared_process":[],"2DAP2E4C9:shared_process":[],"2DC294HQS:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}