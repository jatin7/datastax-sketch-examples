{"paragraphs":[{"text":"%md\n# HyperLogLog\n\nHyperloglog addresses the problem in determining cardinality on large datasets. Usefull for efficiantly summerizing streams of data such as number of unique visitors of a website or counting ad impressions.\n\n","user":"anonymous","dateUpdated":"2018-01-27T20:47:01+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>HyperLogLog</h1>\n<p>Hyperloglog addresses the problem in determining cardinality on large datasets. Usefull for efficiantly summerizing streams of data such as number of unique visitors of a website or counting ad impressions.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1517070732376_1214055330","id":"20171029-215631_784415406","dateCreated":"2018-01-27T16:32:12+0000","dateStarted":"2018-01-27T20:47:00+0000","dateFinished":"2018-01-27T20:47:02+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:9177"},{"title":"Add Spark Dependencies","text":"%dep\n\n//Add these dependencies to the interpreter to make your life easier...\n\nz.reset()\nz.load(\"com.twitter:algebird-core_2.11:0.13.3\")\nz.load(\"org.apache.bahir:spark-streaming-twitter_2.10:2.1.0\")\n","user":"anonymous","dateUpdated":"2018-01-27T16:37:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732377_1213670581","id":"20171029-223254_15426998","dateCreated":"2018-01-27T16:32:12+0000","dateStarted":"2018-01-27T16:37:35+0000","dateFinished":"2018-01-27T16:37:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9178"},{"title":"Create Keyspace","text":"%cassandra\n\nCREATE KEYSPACE IF NOT EXISTS approximations WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };","dateUpdated":"2018-01-27T16:32:12+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732378_1214824827","id":"20171029-192552_1819477421","dateCreated":"2018-01-27T16:32:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9179"},{"title":"Create Table","text":"%cassandra\n\nCREATE TABLE IF NOT EXISTS approximations.hlldata ( id text, date text, batchtime timestamp, batchwindow int, totalinwindow int, uniqueperbatch int, hllstore blob, PRIMARY KEY ((id, date), batchTime));\n","dateUpdated":"2018-01-27T16:32:12+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732379_1214440078","id":"20171024-182121_1460140069","dateCreated":"2018-01-27T16:32:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9180"},{"title":"Create Search Index for Timeseries","text":"%cassandra\n\nCREATE SEARCH  INDEX IF NOT EXISTS ON approximations.hlldata WITH COLUMNS batchtime, uniqueperbatch;\n","user":"anonymous","dateUpdated":"2018-01-27T20:28:27+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/undefined","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732380_1212516334","id":"20171102-144256_1684484170","dateCreated":"2018-01-27T16:32:12+0000","dateStarted":"2018-01-27T16:49:58+0000","dateFinished":"2018-01-27T16:50:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9181"},{"title":"Approximate Unique Twitter Users from Live Stream","text":"%spark\n\nimport com.twitter.algebird.HyperLogLog._\nimport com.twitter.algebird.HyperLogLogMonoid\nimport org.apache.log4j.{Level, Logger}\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\nimport org.apache.spark.streaming.twitter._\nimport twitter4j.conf.ConfigurationBuilder\nimport twitter4j.auth.OAuthAuthorization\nimport java.util.Date\nimport java.text.SimpleDateFormat\nimport com.datastax.spark.connector.streaming._\nimport com.datastax.spark.connector._\nimport com.datastax.spark.connector.SomeColumns\n\n/**\n * Example of using HyperLogLog monoid from Twitter's Algebird together with Spark Streaming's\n * TwitterInputDStream\n */\n\n    /** Bit size parameter for HyperLogLog, trades off accuracy vs size */\n    val BIT_SIZE = 12\n    \n    //Size of window in Stream Processing\n    val WINDOW_SIZE = 10\n    val minutesToStream = 10;\n    \n    val filters = new Array[String](0)\n    \n    //BYO Credentials\n    val cb = new ConfigurationBuilder();\n    cb.setDebugEnabled(true)\n      .setOAuthConsumerKey(\"gHR0H9mDEtP7jDm0pDxn1mGTF\")\n      .setOAuthConsumerSecret(\"wFmr8y29mlvhWiTCT3nta6jxVGWXsi0mTl6OhZf94gYUihjkA6\")\n      .setOAuthAccessToken(\"58465931-2gN1Ofp7Smyg0A0h8EWsbTDAd39LgLfO7WAnfGFeH\")\n      .setOAuthAccessTokenSecret(\"v7cEbLGw0vwkuuGsZsabsMWmZMjCz7C2Nev9TXRa9xW8I\")\n  \n   \n    val auth = new OAuthAuthorization(cb.build)\n    \n    val ssc = new StreamingContext(sc, Seconds(WINDOW_SIZE))\n    \n    val stream = TwitterUtils.createStream(ssc, Some(auth), filters, StorageLevel.MEMORY_ONLY_SER)\n\n    val users = stream.map(status => status.getUser.getId)\n\n    val hll = new HyperLogLogMonoid(BIT_SIZE)\n    \n    val approxUsers = users.mapPartitions(ids => {\n      ids.map(id => hll.create(id))\n    }).reduce(_ + _)\n\n    val todayAsString = new SimpleDateFormat(\"MM-dd-yyyy\").format(new Date())\n   \n    approxUsers.foreachRDD(rdd => {\n      val totalInWindow = rdd.count();\n      if (totalInWindow != 0) {\n       \n        val now = new Date();\n       \n        val partial = rdd.first()\n       \n        val uniqueperbatch = partial.estimatedSize.toInt\n        \n        println(\"Approx distinct users this batch: %d\".format(uniqueperbatch))\n        \n        val oneWindowValue = sc.parallelize(Seq((\"uniqueusers\", todayAsString, now, WINDOW_SIZE, totalInWindow, uniqueperbatch, toBytes(partial))))\n       \n        oneWindowValue.saveToCassandra(\"approximations\", \"hlldata\", SomeColumns(\"id\", \"date\", \"batchtime\", \"batchwindow\", \"totalinwindow\", \"uniqueperbatch\", \"hllstore\"))\n\n      }\n    })\n\n\n    ssc.start()\n    ssc.awaitTerminationOrTimeout(minutesToStream * 60  * 1000)//2 minutes...\n    ssc.stop(stopSparkContext = false, stopGracefully=true)\n    \n","user":"anonymous","dateUpdated":"2018-01-27T20:31:30+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{"0":{"graph":{"mode":"table","height":1656,"optionOpen":false}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732381_1212131585","id":"20171024-141946_1818057078","dateCreated":"2018-01-27T16:32:12+0000","dateStarted":"2018-01-27T17:15:45+0000","dateFinished":"2018-01-27T17:26:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9182"},{"title":"Approximate Unique Twitter Users by Aggregating Window Approximations","text":"%spark\nimport com.datastax.spark.connector.streaming._\nimport com.datastax.spark.connector._\nimport com.datastax.spark.connector.SomeColumns\nimport com.datastax.spark.connector.rdd._\nimport org.apache.spark.SparkContext    \nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nimport com.twitter.algebird.HyperLogLog._\nimport com.twitter.algebird.HyperLogLogMonoid\nimport org.apache.log4j.{Level, Logger}\nimport com.twitter.algebird.HLL\nimport java.util.Date\nimport java.text.SimpleDateFormat\n\nval todayAsString = new SimpleDateFormat(\"MM-dd-yyyy\").format(new Date())\n   \nval rdd  = sc.cassandraTable[Array[Byte]](\"approximations\", \"hlldata\")\n              .select(\"hllstore\")\n              .where(\"id = ?\", \"uniqueusers\").where(\"date = ?\", todayAsString)\n\nval approxUsers = rdd.mapPartitions(ids => {\n  ids.map(id => fromBytes(id))\n}).reduce(_ + _)\n\nval hllagg = approxUsers.estimatedSize.toInt\n\nprintln(\"Total For HLL:\"+hllagg)\n\n","user":"anonymous","dateUpdated":"2018-01-27T20:32:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/scala","results":{},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false},"title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732382_1213285832","id":"20171026-155753_802562419","dateCreated":"2018-01-27T16:32:12+0000","dateStarted":"2018-01-27T17:35:50+0000","dateFinished":"2018-01-27T17:36:04+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9183"},{"title":"Create Table to Store Aggregate Results","text":"%cassandra\n\nCREATE TABLE IF NOT EXISTS approximations.hlldataaggregate ( id text, date text, batchtime timestamp, batchwindow int, totalinwindow int, uniqueperbatch int, hllstore blob, PRIMARY KEY ((id, date), batchTime));\n\n","user":"anonymous","dateUpdated":"2018-01-27T20:35:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517085210040_1642070874","id":"20180127-203330_908535097","dateCreated":"2018-01-27T20:33:30+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9184"},{"title":"Create Search Index For Aggregate Results","text":"%cassandra\n\nCREATE SEARCH INDEX IF NOT EXISTS ON approximations.hlldataaggregate WITH COLUMNS id, date, batchtime, uniqueperbatch;\n\n\n","user":"anonymous","dateUpdated":"2018-01-27T20:36:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"text","editOnDblClick":false},"editorMode":"ace/mode/undefined","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517073612520_703387317","id":"20180127-172012_932976666","dateCreated":"2018-01-27T17:20:12+0000","dateStarted":"2018-01-27T17:21:23+0000","dateFinished":"2018-01-27T17:21:30+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9185"},{"title":"Store Aggregate Results","text":"%spark\n\nimport com.datastax.spark.connector.streaming._\nimport com.datastax.spark.connector._\nimport com.datastax.spark.connector.SomeColumns\nimport com.datastax.spark.connector.rdd._\nimport org.apache.spark.SparkContext    \nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.storage.StorageLevel\nimport org.apache.spark.streaming.{Seconds, StreamingContext}\n\nimport com.twitter.algebird.HyperLogLog._\nimport com.twitter.algebird.HyperLogLogMonoid\nimport org.apache.log4j.{Level, Logger}\nimport com.twitter.algebird.HLL\nimport java.util.Date\nimport java.text.SimpleDateFormat\n\nval todayAsString = new SimpleDateFormat(\"MM-dd-yyyy\").format(new Date())\n   \nval rdd  = sc.cassandraTable[Array[Byte]](\"approximations\", \"hlldata\")\n              .select(\"hllstore\")\n              .where(\"id = ?\", \"uniqueusers\").where(\"date = ?\", todayAsString).where(\"batchtime > ?\", new Date(System.currentTimeMillis() - (30 * 60 * 1000)))\n\nval approxUsers = rdd.mapPartitions(ids => {\n  ids.map(id => fromBytes(id))\n}).reduce(_ + _)\n\nval hllagg = approxUsers.estimatedSize.toInt\n\nval oneWindowValue = sc.parallelize(Seq((\"uniqueusers\", todayAsString, new Date(), 0, 1, hllagg, toBytes(approxUsers))))\n\nprintln(\"Total For HLL:\"+hllagg)\n\noneWindowValue.saveToCassandra(\"approximations\", \"hlldataaggregate\", SomeColumns(\"id\", \"date\", \"batchtime\", \"batchwindow\", \"totalinwindow\", \"uniqueperbatch\", \"hllstore\"))\n        \n","user":"anonymous","dateUpdated":"2018-01-27T20:36:40+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517074572122_-2108013935","id":"20180127-173612_983486301","dateCreated":"2018-01-27T17:36:12+0000","dateStarted":"2018-01-27T18:10:52+0000","dateFinished":"2018-01-27T18:13:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9186"},{"text":"%cassandra\n\nSELECT * FROM approximations.hlldata WHERE id = 'uniqueusers' ALLOW FILTERING;","dateUpdated":"2018-01-27T16:32:12+0000","config":{"colWidth":12,"editorMode":"ace/mode/undefined","results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"lineChart":{},"stackedAreaChart":{"style":"stack"},"multiBarChart":{}},"commonSetting":{},"keys":[{"name":"batchtime","index":2,"aggr":"sum"},{"name":"id","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"uniqueperbatch","index":6,"aggr":"sum"}]},"helium":{}}},"enabled":true,"editorSetting":{"language":"scala","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732382_1213285832","id":"20171024-193717_1816755798","dateCreated":"2018-01-27T16:32:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9187"},{"dateUpdated":"2018-01-27T16:32:12+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1517070732383_1212901083","id":"20171024-144008_2052649078","dateCreated":"2018-01-27T16:32:12+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:9188"}],"name":"DataStax Sketches/HyperLogLog","id":"2D3Y4RVY9","angularObjects":{"2D482M1NT:shared_process":[],"2D6DYCK6Q:shared_process":[],"2D6EPVDRH:shared_process":[],"2D4T6MPTS:shared_process":[],"2D6Z2ZQTS:shared_process":[],"2D68HQAD3:shared_process":[],"2D5EURBEF:shared_process":[],"2D722VUKQ:shared_process":[],"2D44515XJ:shared_process":[],"2D774W3GG:shared_process":[],"2D72EW8JD:shared_process":[],"2D76FS6KU:shared_process":[],"2D6TFQQZH:shared_process":[],"2D681J5US:shared_process":[],"2D6EWRJC4:shared_process":[],"2D5XQTET6:shared_process":[],"2D6YXDX15:shared_process":[],"2D73ZY72T:shared_process":[],"2D4YVMP59:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}
